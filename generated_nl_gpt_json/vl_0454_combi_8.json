{
  "gpt_result": {
    "nl_utterance": "Bar chart displaying count of categories.",
    "encoded_fields": [],
    "constraints": [
      {
        "c_type": "mark",
        "c_name": "bar chart",
        "c_list": [
          {
            "mark": "bar",
            "encoding": {
              "x": {},
              "y": {
                "type": "quantitative"
              },
              "color": {
                "type": "nominal",
                "ignore": true
              },
              "column": {
                "ignore": true,
                "type": "nominal"
              },
              "row": {
                "ignore": true,
                "type": "nominal"
              }
            },
            "unique_map": {
              "x": "y"
            }
          },
          {
            "mark": "bar",
            "encoding": {
              "y": {},
              "x": {
                "type": "quantitative"
              },
              "color": {
                "type": "nominal",
                "ignore": true
              },
              "column": {
                "ignore": true,
                "type": "nominal"
              },
              "row": {
                "ignore": true,
                "type": "nominal"
              }
            },
            "unique_map": {
              "y": "x"
            }
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "bar chart"
      },
      {
        "c_type": "transform",
        "c_name": "aggregate",
        "c_list": [
          {
            "aggregate": "count"
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "count"
      }
    ]
  },
  "input": "Dataset Information: {\n  \"data samples\": [\n    {\n      \"date\": 1.0,\n      \"division\": 4,\n      \"up\": 0,\n      \"down\": 0,\n      \"level\": 0,\n      \"up_ch\": NaN,\n      \"down_ch\": NaN,\n      \"total\": 0,\n      \"up_sh\": NaN,\n      \"down_sh\": NaN,\n      \"level_sh\": NaN,\n      \"change_sh\": NaN,\n      \"division_s\": \"Housing, Water, Electricity, Gas and other fuels\",\n      \"division_sh\": \"Housing & utilities\",\n      \"date2\": \"01-02-1988\",\n      \"date4\": \"1988-02-01\",\n      \"year\": 1988.0,\n      \"month\": 2.0,\n      \"quarter\": 1.0\n    },\n    {\n      \"date\": 17.0,\n      \"division\": 4,\n      \"up\": 99,\n      \"down\": 99,\n      \"level\": 1140,\n      \"up_ch\": 0.07281933,\n      \"down_ch\": -0.064172477,\n      \"total\": 1338,\n      \"up_sh\": 0.07399103,\n      \"down_sh\": 0.07399103,\n      \"level_sh\": 0.85201794,\n      \"change_sh\": 0.14798206,\n      \"division_s\": \"Housing, Water, Electricity, Gas and other fuels\",\n      \"division_sh\": \"Housing & utilities\",\n      \"date2\": \"01-06-1989\",\n      \"date4\": \"1989-06-01\",\n      \"year\": 1989.0,\n      \"month\": 6.0,\n      \"quarter\": 2.0\n    },\n    {\n      \"date\": 387.0,\n      \"division\": 9,\n      \"up\": 822,\n      \"down\": 1397,\n      \"level\": 4386,\n      \"up_ch\": 0.18598323,\n      \"down_ch\": -0.19986658,\n      \"total\": 6605,\n      \"up_sh\": 0.12445118,\n      \"down_sh\": 0.21150644,\n      \"level_sh\": 0.66404241,\n      \"change_sh\": 0.33595762,\n      \"division_s\": \"Recreation and culture\",\n      \"division_sh\": \"Recreation & culture\",\n      \"date2\": \"01-04-2020\",\n      \"date4\": \"2020-04-01\",\n      \"year\": 2020.0,\n      \"month\": 4.0,\n      \"quarter\": 2.0\n    },\n    {\n      \"date\": 402.0,\n      \"division\": 9,\n      \"up\": 781,\n      \"down\": 892,\n      \"level\": 7326,\n      \"up_ch\": 0.15793201,\n      \"down_ch\": -0.2,\n      \"total\": 8999,\n      \"up_sh\": 0.086787418,\n      \"down_sh\": 0.099122122,\n      \"level_sh\": 0.81409043,\n      \"change_sh\": 0.18590954,\n      \"division_s\": \"Recreation and culture\",\n      \"division_sh\": \"Recreation & culture\",\n      \"date2\": \"01-07-2021\",\n      \"date4\": \"2021-07-01\",\n      \"year\": 2021.0,\n      \"month\": 7.0,\n      \"quarter\": 3.0\n    },\n    {\n      \"date\": 49.0,\n      \"division\": 5,\n      \"up\": 1138,\n      \"down\": 451,\n      \"level\": 5633,\n      \"up_ch\": 0.10343863,\n      \"down_ch\": -0.09114711,\n      \"total\": 7222,\n      \"up_sh\": 0.15757407,\n      \"down_sh\": 0.062448077,\n      \"level_sh\": 0.77997786,\n      \"change_sh\": 0.22002214,\n      \"division_s\": \"Furnishings, household equipment and maintenance\",\n      \"division_sh\": \"Household\",\n      \"date2\": \"01-02-1992\",\n      \"date4\": \"1992-02-01\",\n      \"year\": 1992.0,\n      \"month\": 2.0,\n      \"quarter\": 1.0\n    }\n  ],\n  \"column names\": [\n    \"date\",\n    \"division\",\n    \"up\",\n    \"down\",\n    \"level\",\n    \"up_ch\",\n    \"down_ch\",\n    \"total\",\n    \"up_sh\",\n    \"down_sh\",\n    \"level_sh\",\n    \"change_sh\",\n    \"division_s\",\n    \"division_sh\",\n    \"date2\",\n    \"date4\",\n    \"year\",\n    \"month\",\n    \"quarter\"\n  ]\n}\n\nYour Job:\nI am developing a NL to Data Visualization Dataset. \nPlease help me generate natural language utterance for given dataset and constraints.\nDefinition about the Taks:\n- 'utterance' is what a user would say to make a chart. It should be a queries structure. One NL 'utterance' is in one or two sentences. Here are two examples from Queries for reference:\n    Scatter plot, sales by profit.\n    Cylinders average mpg.\n- 'given dataset' is in form of column names, column type, range/unique values of the column.\n- 'constraints' are information about the chart that should be included in the utterance. \n    So we can find a reference phrase in the NL utterance that corresponds to the given constraints. \n- 'reference phrase' can be explicit, ambiguous, and by_value. 'ambiguous' means the phrase can map to more than one columns in the dataset, always a hypernym of column names(depending on the dataset values).\n    For example:\n    {\"column\": \"gdpPercap\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"GDP per capita\"},\n    {\"column\": [\"country\",\"continent\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n    {\"column\": [\"country\",\"country_short_name\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"countries\"}\n    {\"c_type\": \"mark\", \"c_name\": \"point chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"scatter plot\"}\n    {\"c_type\": \"mark\", \"c_name\": \"arc chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"pie chart\"}\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"explicit\",\"nl_ref_phrase\": \"for countries Iceland and Norway\"},\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"by_value\",\"nl_ref_phrase\": \"for Iceland and Norway\"},\n- the 'nl_ref_phrase' for 'ambiguous' columns should be equally near all ambiguous columns, not too near to one of the column since it would not be ambiguous.\n    good example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"location\"}\n    bad example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n- You only include given constraints and no other information. \n    For example, if a column name is not in the given constraint, it will not be included in the NL utterance.\n    Also, it a chart mark or chart encoding channel is not in the given constraint, it will not be included in the NL utterance.\n- all 'nl_ref_phrase' shoule be included in the 'nl_utterance'. \n\nThe output format is identical to the input format, but fill in the str blanks(\"...\").\n### Input:\n{\n  \"nl_utterance\": \"...\",\n  \"encoded_fields\": [],\n  \"constraints\": [\n    {\n      \"c_type\": \"mark\",\n      \"c_name\": \"bar chart\",\n      \"c_list\": [\n        {\n          \"mark\": \"bar\",\n          \"encoding\": {\n            \"x\": {},\n            \"y\": {\n              \"type\": \"quantitative\"\n            },\n            \"color\": {\n              \"type\": \"nominal\",\n              \"ignore\": true\n            },\n            \"column\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            },\n            \"row\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            }\n          },\n          \"unique_map\": {\n            \"x\": \"y\"\n          }\n        },\n        {\n          \"mark\": \"bar\",\n          \"encoding\": {\n            \"y\": {},\n            \"x\": {\n              \"type\": \"quantitative\"\n            },\n            \"color\": {\n              \"type\": \"nominal\",\n              \"ignore\": true\n            },\n            \"column\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            },\n            \"row\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            }\n          },\n          \"unique_map\": {\n            \"y\": \"x\"\n          }\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"aggregate\",\n      \"c_list\": [\n        {\n          \"aggregate\": \"count\"\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ]\n}\n\n### Output:"
}