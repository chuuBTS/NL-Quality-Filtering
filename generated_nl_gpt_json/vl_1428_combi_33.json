{
  "gpt_result": {
    "nl_utterance": "Show a small multiple chart of library and variant class by sum of counts and function scores.",
    "encoded_fields": [
      {
        "field": "library",
        "type": "nominal",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "library"
      },
      {
        "field": "variant_class",
        "type": "nominal",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "variant class"
      },
      {
        "field": [
          "func_score",
          "mean_func_score"
        ],
        "type": "quantitative",
        "nl_ref_type": "ambiguous",
        "nl_ref_phrase": "function scores"
      },
      {
        "field": "count",
        "type": "quantitative",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "counts"
      }
    ],
    "constraints": [
      {
        "c_type": "task",
        "c_name": "small_multiple",
        "c_list": [
          {
            "encoding": {
              "facet": {}
            }
          },
          {
            "encoding": {
              "column": {}
            }
          },
          {
            "encoding": {
              "row": {}
            }
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "small multiple"
      },
      {
        "c_type": "transform",
        "c_name": "aggregate",
        "c_list": [
          {
            "field": "count",
            "aggregate": "sum"
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "sum of counts"
      }
    ]
  },
  "input": "Dataset Information: {\n  \"data samples\": [\n    {\n      \"library\": \"Lib-1\",\n      \"variant_class\": \"1 nonsynonymous\",\n      \"func_score\": -11.6082,\n      \"count\": 1.0879177562792605e-05,\n      \"mean_func_score\": -0.382345700798838\n    },\n    {\n      \"library\": \"Lib-3\",\n      \"variant_class\": \"deletion\",\n      \"func_score\": -7.95085306122449,\n      \"count\": 0.0545852296489257,\n      \"mean_func_score\": -2.6665383065429022\n    },\n    {\n      \"library\": \"Lib-1\",\n      \"variant_class\": \"deletion\",\n      \"func_score\": -2.830567346938775,\n      \"count\": 0.0890784864913,\n      \"mean_func_score\": -1.293895116892911\n    },\n    {\n      \"library\": \"Lib-2\",\n      \"variant_class\": \"wildtype\",\n      \"func_score\": -11.24246530612245,\n      \"count\": 7.837901031298962e-20,\n      \"mean_func_score\": -0.1805424485570079\n    },\n    {\n      \"library\": \"Lib-3\",\n      \"variant_class\": \"1 nonsynonymous\",\n      \"func_score\": 1.1925142857142852,\n      \"count\": 0.1106326794264566,\n      \"mean_func_score\": -0.7397690468549423\n    }\n  ],\n  \"column names\": [\n    \"library\",\n    \"variant_class\",\n    \"func_score\",\n    \"count\",\n    \"mean_func_score\"\n  ]\n}\n\nYour Job:\nI am developing a NL to Data Visualization Dataset. \nPlease help me generate natural language utterance for given dataset and constraints.\nDefinition about the Taks:\n- 'utterance' is what a user would say to make a chart.  One NL 'utterance' is in one or two sentences. Here are two examples from Others for reference:\n    I want to know how many orders there are by the quantity of the order.\n    scatter(x=production budget, y=worldwide gross) for content rating.\n- 'given dataset' is in form of column names, column type, range/unique values of the column.\n- 'constraints' are information about the chart that should be included in the utterance. \n    So we can find a reference phrase in the NL utterance that corresponds to the given constraints. \n- 'reference phrase' can be explicit, ambiguous, and by_value. 'ambiguous' means the phrase can map to more than one columns in the dataset, always a hypernym of column names(depending on the dataset values).\n    For example:\n    {\"column\": \"gdpPercap\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"GDP per capita\"},\n    {\"column\": [\"country\",\"continent\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n    {\"column\": [\"country\",\"country_short_name\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"countries\"}\n    {\"c_type\": \"mark\", \"c_name\": \"point chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"scatter plot\"}\n    {\"c_type\": \"mark\", \"c_name\": \"arc chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"pie chart\"}\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"explicit\",\"nl_ref_phrase\": \"for countries Iceland and Norway\"},\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"by_value\",\"nl_ref_phrase\": \"for Iceland and Norway\"},\n- the 'nl_ref_phrase' for 'ambiguous' columns should be equally near all ambiguous columns, not too near to one of the column since it would not be ambiguous.\n    good example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"location\"}\n    bad example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n- You only include given constraints and no other information. \n    For example, if a column name is not in the given constraint, it will not be included in the NL utterance.\n    Also, it a chart mark or chart encoding channel is not in the given constraint, it will not be included in the NL utterance.\n- all 'nl_ref_phrase' shoule be included in the 'nl_utterance'. \n\nThe output format is identical to the input format, but fill in the str blanks(\"...\").\n### Input:\n{\n  \"nl_utterance\": \"...\",\n  \"encoded_fields\": [\n    {\n      \"field\": \"library\",\n      \"type\": \"nominal\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"field\": \"variant_class\",\n      \"type\": \"nominal\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"field\": [\n        \"func_score\",\n        \"mean_func_score\"\n      ],\n      \"type\": \"quantitative\",\n      \"nl_ref_type\": \"ambiguous\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"field\": \"count\",\n      \"type\": \"quantitative\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"c_type\": \"task\",\n      \"c_name\": \"small_multiple\",\n      \"c_list\": [\n        {\n          \"encoding\": {\n            \"facet\": {}\n          }\n        },\n        {\n          \"encoding\": {\n            \"column\": {}\n          }\n        },\n        {\n          \"encoding\": {\n            \"row\": {}\n          }\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"aggregate\",\n      \"c_list\": [\n        {\n          \"field\": \"count\",\n          \"aggregate\": \"sum\"\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ]\n}\n\n### Output:"
}