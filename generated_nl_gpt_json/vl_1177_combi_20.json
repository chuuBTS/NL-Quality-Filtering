{
  "gpt_result": {
    "nl_utterance": "Can you show me a heat map of the time seconds taken by different age groups and genders? Count the entries and sort them in the order of Retired, Adult, Teen, Pre-Teen, and Kid.",
    "encoded_fields": [
      {
        "field": [
          "Age Group",
          "Gender"
        ],
        "type": "nominal",
        "nl_ref_type": "ambiguous",
        "nl_ref_phrase": "different age groups and genders"
      },
      {
        "field": "Time (seconds)",
        "type": "quantitative",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "time seconds"
      }
    ],
    "constraints": [
      {
        "c_type": "mark",
        "c_name": "rect chart",
        "c_list": [
          {
            "mark": "rect",
            "encoding": {
              "x": {},
              "y": {},
              "color": {
                "type": "quantitative"
              },
              "column": {
                "ignore": true,
                "type": "nominal"
              },
              "row": {
                "ignore": true,
                "type": "nominal"
              }
            },
            "unique_map": {
              "(x,y)": "color"
            }
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "heat map"
      },
      {
        "c_type": "transform",
        "c_name": "aggregate",
        "c_list": [
          {
            "aggregate": "count"
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "Count the entries"
      },
      {
        "c_type": "transform",
        "c_name": "sort",
        "c_list": [
          [
            "",
            "Retired",
            "Adult",
            "Teen",
            "Pre-Teen",
            "Kid"
          ]
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "sort them in the order of Retired, Adult, Teen, Pre-Teen, and Kid"
      }
    ]
  },
  "input": "Dataset Information: {\n  \"data samples\": [\n    {\n      \"id\": 20,\n      \"OpponentName\": \"Fast person\",\n      \"start\": \"2018-08-25 15:07:29.106 +00:00\",\n      \"end\": \"2018-08-25 15:07:32.662 +00:00\",\n      \"PersonId\": 20,\n      \"Time (seconds)\": 4.0,\n      \"id.1\": 20,\n      \"Gender\": \"male\",\n      \"Age Group\": \"Teen\",\n      \"Favorite Activity\": \"Gaming\",\n      \"Height\": 71.0,\n      \"zipcode\": 35242,\n      \"state\": \"AL\",\n      \"Event\": \"Makevention 2018\"\n    },\n    {\n      \"id\": 293,\n      \"OpponentName\": NaN,\n      \"start\": \"2019-10-26 16:14:26.593 +00:00\",\n      \"end\": \"2019-10-26 16:14:33.042 +00:00\",\n      \"PersonId\": 293,\n      \"Time (seconds)\": 6.0,\n      \"id.1\": 293,\n      \"Gender\": \"Unkown\",\n      \"Age Group\": \"Pre-Teen\",\n      \"Favorite Activity\": \"Sports\",\n      \"Height\": 58.0,\n      \"zipcode\": 47401,\n      \"state\": \"IN\",\n      \"Event\": \"Sciencefest 2019\"\n    },\n    {\n      \"id\": 381,\n      \"OpponentName\": NaN,\n      \"start\": \"2019-10-26 18:14:08.890 +00:00\",\n      \"end\": \"2019-10-26 18:14:11.865 +00:00\",\n      \"PersonId\": 381,\n      \"Time (seconds)\": 3.0,\n      \"id.1\": 381,\n      \"Gender\": \"Unkown\",\n      \"Age Group\": \"Kid\",\n      \"Favorite Activity\": \"Sports\",\n      \"Height\": 60.0,\n      \"zipcode\": 47402,\n      \"state\": \"IN\",\n      \"Event\": \"Sciencefest 2019\"\n    },\n    {\n      \"id\": 110,\n      \"OpponentName\": NaN,\n      \"start\": \"2019-08-24 17:16:10.090 +00:00\",\n      \"end\": \"2019-08-24 17:16:14.769 +00:00\",\n      \"PersonId\": 110,\n      \"Time (seconds)\": 5.0,\n      \"id.1\": 110,\n      \"Gender\": \"Unkown\",\n      \"Age Group\": \"Retired\",\n      \"Favorite Activity\": \"Art\",\n      \"Height\": 60.0,\n      \"zipcode\": 47265,\n      \"state\": \"IN\",\n      \"Event\": \"Makevention 2019\"\n    },\n    {\n      \"id\": 178,\n      \"OpponentName\": NaN,\n      \"start\": \"2019-08-24 19:46:12.843 +00:00\",\n      \"end\": \"2019-08-24 19:46:14.691 +00:00\",\n      \"PersonId\": 178,\n      \"Time (seconds)\": 2.0,\n      \"id.1\": 178,\n      \"Gender\": \"Unkown\",\n      \"Age Group\": \"Adult\",\n      \"Favorite Activity\": \"Art\",\n      \"Height\": 66.0,\n      \"zipcode\": 47401,\n      \"state\": \"IN\",\n      \"Event\": \"Makevention 2019\"\n    }\n  ],\n  \"column names\": [\n    \"id\",\n    \"OpponentName\",\n    \"start\",\n    \"end\",\n    \"PersonId\",\n    \"Time (seconds)\",\n    \"id.1\",\n    \"Gender\",\n    \"Age Group\",\n    \"Favorite Activity\",\n    \"Height\",\n    \"zipcode\",\n    \"state\",\n    \"Event\"\n  ]\n}\n\nYour Job:\nI am developing a NL to Data Visualization Dataset. \nPlease help me generate natural language utterance for given dataset and constraints.\nDefinition about the Taks:\n- 'utterance' is what a user would say to make a chart. It should be a questions structure. One NL 'utterance' is in one or two sentences. Here are two examples from Questions for reference:\n    Are IMDb rating and rotten tomatoes rating related?\n    How much do various cars weigh?\n- 'given dataset' is in form of column names, column type, range/unique values of the column.\n- 'constraints' are information about the chart that should be included in the utterance. \n    So we can find a reference phrase in the NL utterance that corresponds to the given constraints. \n- 'reference phrase' can be explicit, ambiguous, and by_value. 'ambiguous' means the phrase can map to more than one columns in the dataset, always a hypernym of column names(depending on the dataset values).\n    For example:\n    {\"column\": \"gdpPercap\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"GDP per capita\"},\n    {\"column\": [\"country\",\"continent\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n    {\"column\": [\"country\",\"country_short_name\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"countries\"}\n    {\"c_type\": \"mark\", \"c_name\": \"point chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"scatter plot\"}\n    {\"c_type\": \"mark\", \"c_name\": \"arc chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"pie chart\"}\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"explicit\",\"nl_ref_phrase\": \"for countries Iceland and Norway\"},\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"by_value\",\"nl_ref_phrase\": \"for Iceland and Norway\"},\n- the 'nl_ref_phrase' for 'ambiguous' columns should be equally near all ambiguous columns, not too near to one of the column since it would not be ambiguous.\n    good example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"location\"}\n    bad example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n- You only include given constraints and no other information. \n    For example, if a column name is not in the given constraint, it will not be included in the NL utterance.\n    Also, it a chart mark or chart encoding channel is not in the given constraint, it will not be included in the NL utterance.\n- all 'nl_ref_phrase' shoule be included in the 'nl_utterance'. \n\nThe output format is identical to the input format, but fill in the str blanks(\"...\").\n### Input:\n{\n  \"nl_utterance\": \"...\",\n  \"encoded_fields\": [\n    {\n      \"field\": [\n        \"Age Group\",\n        \"Gender\"\n      ],\n      \"type\": \"nominal\",\n      \"nl_ref_type\": \"ambiguous\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"field\": \"Time (seconds)\",\n      \"type\": \"quantitative\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"c_type\": \"mark\",\n      \"c_name\": \"rect chart\",\n      \"c_list\": [\n        {\n          \"mark\": \"rect\",\n          \"encoding\": {\n            \"x\": {},\n            \"y\": {},\n            \"color\": {\n              \"type\": \"quantitative\"\n            },\n            \"column\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            },\n            \"row\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            }\n          },\n          \"unique_map\": {\n            \"(x,y)\": \"color\"\n          }\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"aggregate\",\n      \"c_list\": [\n        {\n          \"aggregate\": \"count\"\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"sort\",\n      \"c_list\": [\n        [\n          \"\",\n          \"Retired\",\n          \"Adult\",\n          \"Teen\",\n          \"Pre-Teen\",\n          \"Kid\"\n        ]\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ]\n}\n\n### Output:"
}