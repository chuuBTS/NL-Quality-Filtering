{
  "gpt_result": {
    "nl_utterance": "What is the distribution of issue amounts across different gilt types using a pie chart?",
    "encoded_fields": [
      {
        "field": "issueAmount",
        "type": "quantitative",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "issue amounts"
      },
      {
        "field": "giltType",
        "type": "nominal",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "gilt types"
      }
    ],
    "constraints": [
      {
        "c_type": "mark",
        "c_name": "arc chart",
        "c_list": [
          {
            "mark": "arc",
            "encoding": {
              "theta": {
                "type": "quantitative"
              },
              "color": {
                "type": "nominal"
              },
              "column": {
                "ignore": true,
                "type": "nominal"
              },
              "row": {
                "ignore": true,
                "type": "nominal"
              }
            },
            "unique_map": {
              "color": "theta"
            }
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "pie chart"
      }
    ]
  },
  "input": "Dataset Information: {\n  \"data samples\": [\n    {\n      \"rawType\": \"2\\u00bd% Index-linked Treasury Stock 2024\",\n      \"coupon\": \"2\\u00bd\",\n      \"giltType\": \"Index Linked\",\n      \"code\": \"GB0008983024\",\n      \"redemptionDate\": \" 17-Jul-2024\",\n      \"issueDate\": \" 30-Dec-1986\",\n      \"divDates\": \"17 Jan/Jul\",\n      \"divNextDate\": \" 06-Jan-2023\",\n      \"issueAmount\": 6821,\n      \"baseRPI\": 97.667931,\n      \"amountINCinfUplift\": 22363.0,\n      \"issueYear\": 1986,\n      \"totalCumulative\": 6821,\n      \"id\": 1\n    },\n    {\n      \"rawType\": \"5% Treasury Stock 2025\",\n      \"coupon\": \"5\",\n      \"giltType\": \"Treasury Stock\",\n      \"code\": \"GB0030880693\",\n      \"redemptionDate\": \" 07-Mar-2025\",\n      \"issueDate\": \" 27-Sep-2001\",\n      \"divDates\": \"7 Mar/Sep\",\n      \"divNextDate\": \" 24-Feb-2023\",\n      \"issueAmount\": 37339,\n      \"baseRPI\": NaN,\n      \"amountINCinfUplift\": NaN,\n      \"issueYear\": 2001,\n      \"totalCumulative\": 109588,\n      \"id\": 5\n    },\n    {\n      \"rawType\": \"1\\u00bd% Treasury Gilt 2026\",\n      \"coupon\": \"1\\u00bd\",\n      \"giltType\": \"Treasury Gilt\",\n      \"code\": \"GB00BYZW3G56\",\n      \"redemptionDate\": \" 22-Jul-2026\",\n      \"issueDate\": \" 18-Feb-2016\",\n      \"divDates\": \"22 Jan/Jul\",\n      \"divNextDate\": \" 12-Jan-2023\",\n      \"issueAmount\": 43651,\n      \"baseRPI\": NaN,\n      \"amountINCinfUplift\": NaN,\n      \"issueYear\": 2016,\n      \"totalCumulative\": 1023287,\n      \"id\": 48\n    },\n    {\n      \"rawType\": \"0 3/8% Treasury Gilt 2026\",\n      \"coupon\": \"3/8\",\n      \"giltType\": \"Treasury Gilt\",\n      \"code\": \"GB00BNNGP668\",\n      \"redemptionDate\": \" 22-Oct-2026\",\n      \"issueDate\": \" 03-Mar-2021\",\n      \"divDates\": \"22 Apr/Oct\",\n      \"divNextDate\": \" 13-Oct-2022\",\n      \"issueAmount\": 32890,\n      \"baseRPI\": NaN,\n      \"amountINCinfUplift\": NaN,\n      \"issueYear\": 2021,\n      \"totalCumulative\": 1943504,\n      \"id\": 80\n    },\n    {\n      \"rawType\": \"0\\u00bd% Treasury Gilt 2061\",\n      \"coupon\": \"0\\u00bd\",\n      \"giltType\": \"Treasury Gilt\",\n      \"code\": \"GB00BMBL1D50\",\n      \"redemptionDate\": \" 22-Oct-2061\",\n      \"issueDate\": \" 20-May-2020\",\n      \"divDates\": \"22 Apr/Oct\",\n      \"divNextDate\": \" 13-Oct-2022\",\n      \"issueAmount\": 23386,\n      \"baseRPI\": NaN,\n      \"amountINCinfUplift\": NaN,\n      \"issueYear\": 2020,\n      \"totalCumulative\": 1781700,\n      \"id\": 73\n    }\n  ],\n  \"column names\": [\n    \"rawType\",\n    \"coupon\",\n    \"giltType\",\n    \"code\",\n    \"redemptionDate\",\n    \"issueDate\",\n    \"divDates\",\n    \"divNextDate\",\n    \"issueAmount\",\n    \"baseRPI\",\n    \"amountINCinfUplift\",\n    \"issueYear\",\n    \"totalCumulative\",\n    \"id\"\n  ]\n}\n\nYour Job:\nI am developing a NL to Data Visualization Dataset. \nPlease help me generate natural language utterance for given dataset and constraints.\nDefinition about the Taks:\n- 'utterance' is what a user would say to make a chart. It should be a questions structure. One NL 'utterance' is in one or two sentences. Here are two examples from Questions for reference:\n    On average, how much was earned by movies of each genre?\n    Are IMDb rating and rotten tomatoes rating related?\n- 'given dataset' is in form of column names, column type, range/unique values of the column.\n- 'constraints' are information about the chart that should be included in the utterance. \n    So we can find a reference phrase in the NL utterance that corresponds to the given constraints. \n- 'reference phrase' can be explicit, ambiguous, and by_value. 'ambiguous' means the phrase can map to more than one columns in the dataset, always a hypernym of column names(depending on the dataset values).\n    For example:\n    {\"column\": \"gdpPercap\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"GDP per capita\"},\n    {\"column\": [\"country\",\"continent\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n    {\"column\": [\"country\",\"country_short_name\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"countries\"}\n    {\"c_type\": \"mark\", \"c_name\": \"point chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"scatter plot\"}\n    {\"c_type\": \"mark\", \"c_name\": \"arc chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"pie chart\"}\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"explicit\",\"nl_ref_phrase\": \"for countries Iceland and Norway\"},\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"by_value\",\"nl_ref_phrase\": \"for Iceland and Norway\"},\n- the 'nl_ref_phrase' for 'ambiguous' columns should be equally near all ambiguous columns, not too near to one of the column since it would not be ambiguous.\n    good example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"location\"}\n    bad example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n- You only include given constraints and no other information. \n    For example, if a column name is not in the given constraint, it will not be included in the NL utterance.\n    Also, it a chart mark or chart encoding channel is not in the given constraint, it will not be included in the NL utterance.\n- all 'nl_ref_phrase' shoule be included in the 'nl_utterance'. \n\nThe output format is identical to the input format, but fill in the str blanks(\"...\").\n### Input:\n{\n  \"nl_utterance\": \"...\",\n  \"encoded_fields\": [\n    {\n      \"field\": \"issueAmount\",\n      \"type\": \"quantitative\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"field\": \"giltType\",\n      \"type\": \"nominal\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"c_type\": \"mark\",\n      \"c_name\": \"arc chart\",\n      \"c_list\": [\n        {\n          \"mark\": \"arc\",\n          \"encoding\": {\n            \"theta\": {\n              \"type\": \"quantitative\"\n            },\n            \"color\": {\n              \"type\": \"nominal\"\n            },\n            \"column\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            },\n            \"row\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            }\n          },\n          \"unique_map\": {\n            \"color\": \"theta\"\n          }\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ]\n}\n\n### Output:"
}