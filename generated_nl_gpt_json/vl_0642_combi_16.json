{
  "gpt_result": {
    "nl_utterance": "Create a bar chart showing the Value for different private or public entities, filtered by specific Number values. Sort the data in ascending order based on the Number.",
    "encoded_fields": [
      {
        "field": "Value",
        "type": "quantitative",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "Value"
      },
      {
        "field": "privatePublic",
        "type": "nominal",
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "private or public entities"
      }
    ],
    "constraints": [
      {
        "c_type": "mark",
        "c_name": "bar chart",
        "c_list": [
          {
            "mark": "bar",
            "encoding": {
              "x": {},
              "y": {
                "type": "quantitative"
              },
              "color": {
                "type": "nominal",
                "ignore": true
              },
              "column": {
                "ignore": true,
                "type": "nominal"
              },
              "row": {
                "ignore": true,
                "type": "nominal"
              }
            },
            "unique_map": {
              "x": "y"
            }
          },
          {
            "mark": "bar",
            "encoding": {
              "y": {},
              "x": {
                "type": "quantitative"
              },
              "color": {
                "type": "nominal",
                "ignore": true
              },
              "column": {
                "ignore": true,
                "type": "nominal"
              },
              "row": {
                "ignore": true,
                "type": "nominal"
              }
            },
            "unique_map": {
              "y": "x"
            }
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "bar chart"
      },
      {
        "c_type": "transform",
        "c_name": "filter",
        "c_list": [
          {
            "field": "Number",
            "oneOf": [
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              17,
              18
            ]
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "filtered by specific Number values"
      },
      {
        "c_type": "transform",
        "c_name": "sort",
        "c_list": [
          {
            "field": "Number",
            "order": "ascending"
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "Sort the data in ascending order based on the Number"
      },
      {
        "c_type": "transform",
        "c_name": "sort",
        "c_list": [
          {
            "field": "Number",
            "order": "ascending"
          }
        ],
        "nl_ref_type": "explicit",
        "nl_ref_phrase": "Sort the data in ascending order based on the Number"
      }
    ]
  },
  "input": "Dataset Information: {\n  \"data samples\": [\n    {\n      \"Line\": 1,\n      \"Number\": 1,\n      \"Item\": \"Gross domestic product\",\n      \"shortName\": \"GDP\",\n      \"Value\": 25723.9,\n      \"privatePublic\": \"Private\",\n      \"Source\": \"U.S. Bureau of Economic Analysis, \\\"Value Added by Industry\\\" (accessed Monday, January 23, 2023).\"\n    },\n    {\n      \"Line\": 11,\n      \"Number\": 6,\n      \"Item\": \"Construction\",\n      \"shortName\": \"Construction\",\n      \"Value\": 1008.9,\n      \"privatePublic\": \"Private\",\n      \"Source\": NaN\n    },\n    {\n      \"Line\": 49,\n      \"Number\": 11,\n      \"Item\": \"Information\",\n      \"shortName\": \"IT\",\n      \"Value\": 1416.5,\n      \"privatePublic\": \"Private\",\n      \"Source\": NaN\n    },\n    {\n      \"Line\": 98,\n      \"Number\": 19,\n      \"Item\": \"Private goods-producing industries1\",\n      \"shortName\": \"Goods\",\n      \"Value\": 4634.2,\n      \"privatePublic\": \"XYZ\",\n      \"Source\": NaN\n    },\n    {\n      \"Line\": 34,\n      \"Number\": 8,\n      \"Item\": \"Wholesale trade\",\n      \"shortName\": \"Wholesale\",\n      \"Value\": 1626.9,\n      \"privatePublic\": \"Private\",\n      \"Source\": NaN\n    }\n  ],\n  \"column names\": [\n    \"Line\",\n    \"Number\",\n    \"Item\",\n    \"shortName\",\n    \"Value\",\n    \"privatePublic\",\n    \"Source\"\n  ]\n}\n\nYour Job:\nI am developing a NL to Data Visualization Dataset. \nPlease help me generate natural language utterance for given dataset and constraints.\nDefinition about the Taks:\n- 'utterance' is what a user would say to make a chart. It should be a questions structure. One NL 'utterance' is in one or two sentences. Here are two examples from Questions for reference:\n    How many cars do each country manufacture?\n    On average, how much was earned by movies of each genre?\n- 'given dataset' is in form of column names, column type, range/unique values of the column.\n- 'constraints' are information about the chart that should be included in the utterance. \n    So we can find a reference phrase in the NL utterance that corresponds to the given constraints. \n- 'reference phrase' can be explicit, ambiguous, and by_value. 'ambiguous' means the phrase can map to more than one columns in the dataset, always a hypernym of column names(depending on the dataset values).\n    For example:\n    {\"column\": \"gdpPercap\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"GDP per capita\"},\n    {\"column\": [\"country\",\"continent\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n    {\"column\": [\"country\",\"country_short_name\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"countries\"}\n    {\"c_type\": \"mark\", \"c_name\": \"point chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"scatter plot\"}\n    {\"c_type\": \"mark\", \"c_name\": \"arc chart\", \"nl_ref_type\": \"explicit\", \"nl_ref_phrase\": \"pie chart\"}\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"explicit\",\"nl_ref_phrase\": \"for countries Iceland and Norway\"},\n    {\"c_type\": \"transform\",\"c_name\": \"filter\",\"c_list\": [{\"field\": \"country\",\"oneOf\": [\"Iceland\",\"Norway\"]}],\"nl_ref_type\": \"by_value\",\"nl_ref_phrase\": \"for Iceland and Norway\"},\n- the 'nl_ref_phrase' for 'ambiguous' columns should be equally near all ambiguous columns, not too near to one of the column since it would not be ambiguous.\n    good example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"location\"}\n    bad example: {\"column\": [\"country\",\"region\"], \"nl_ref_type\": \"ambiguous\", \"nl_ref_phrase\": \"region\"}\n- You only include given constraints and no other information. \n    For example, if a column name is not in the given constraint, it will not be included in the NL utterance.\n    Also, it a chart mark or chart encoding channel is not in the given constraint, it will not be included in the NL utterance.\n- all 'nl_ref_phrase' shoule be included in the 'nl_utterance'. \n\nThe output format is identical to the input format, but fill in the str blanks(\"...\").\n### Input:\n{\n  \"nl_utterance\": \"...\",\n  \"encoded_fields\": [\n    {\n      \"field\": \"Value\",\n      \"type\": \"quantitative\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"field\": \"privatePublic\",\n      \"type\": \"nominal\",\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"c_type\": \"mark\",\n      \"c_name\": \"bar chart\",\n      \"c_list\": [\n        {\n          \"mark\": \"bar\",\n          \"encoding\": {\n            \"x\": {},\n            \"y\": {\n              \"type\": \"quantitative\"\n            },\n            \"color\": {\n              \"type\": \"nominal\",\n              \"ignore\": true\n            },\n            \"column\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            },\n            \"row\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            }\n          },\n          \"unique_map\": {\n            \"x\": \"y\"\n          }\n        },\n        {\n          \"mark\": \"bar\",\n          \"encoding\": {\n            \"y\": {},\n            \"x\": {\n              \"type\": \"quantitative\"\n            },\n            \"color\": {\n              \"type\": \"nominal\",\n              \"ignore\": true\n            },\n            \"column\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            },\n            \"row\": {\n              \"ignore\": true,\n              \"type\": \"nominal\"\n            }\n          },\n          \"unique_map\": {\n            \"y\": \"x\"\n          }\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"filter\",\n      \"c_list\": [\n        {\n          \"field\": \"Number\",\n          \"oneOf\": [\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10,\n            11,\n            12,\n            13,\n            14,\n            15,\n            17,\n            18\n          ]\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"sort\",\n      \"c_list\": [\n        {\n          \"field\": \"Number\",\n          \"order\": \"ascending\"\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    },\n    {\n      \"c_type\": \"transform\",\n      \"c_name\": \"sort\",\n      \"c_list\": [\n        {\n          \"field\": \"Number\",\n          \"order\": \"ascending\"\n        }\n      ],\n      \"nl_ref_type\": \"explicit\",\n      \"nl_ref_phrase\": \"...\"\n    }\n  ]\n}\n\n### Output:"
}